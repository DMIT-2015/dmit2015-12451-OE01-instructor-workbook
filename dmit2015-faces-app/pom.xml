<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dmit2015</groupId>
    <artifactId>dmit2015-faces-app</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>dmit2015-faces-app</name>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.source>21</maven.compiler.source>
        <junit.version>5.10.2</junit.version>
    </properties>

    <dependencies>
        <!-- https://balusc.omnifaces.org/2013/10/how-to-install-cdi-in-tomcat.html -->
        <!-- CDI implementation (Weld) for Apache Tomcat 11 -->
<!--        <dependency>-->
<!--            <groupId>org.jboss.weld.servlet</groupId>-->
<!--            <artifactId>weld-servlet-shaded</artifactId>-->
<!--            <version>6.0.3.Final</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-web-api</artifactId>
            <version>10.0.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.6.28.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-spatial</artifactId>
            <version>6.6.28.Final</version>
        </dependency>

        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc11</artifactId>
            <version>23.9.0.25.07</version>
        </dependency>

        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>13.2.0.jre11</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.7</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
        </dependency>

        <!-- Microprofile Config (Smallrye) implementation for Apache Tomcat 11 -->
        <dependency>
            <groupId>io.smallrye.config</groupId>
            <artifactId>smallrye-config</artifactId>
            <version>3.13.4</version>
        </dependency>
        <!-- Jakarta Faces (Mojarra) implementation for Apache Tomcat 11 -->
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.faces</artifactId>
            <version>4.0.11</version>
        </dependency>
        <!-- Jakarta Validation (Hibernate) implementation for Apache Tomcat 11 -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>9.0.1.Final</version>
        </dependency>
        <!-- Jakarta JSON Binding (Yasson) implementation for Apache Tomcat 11 -->
        <dependency>
            <groupId>org.eclipse</groupId>
            <artifactId>yasson</artifactId>
            <version>3.0.4</version>
        </dependency>
        <!-- Jakarta JSON Processing (Parrson) implementation for Apache Tomcat 11 -->
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson</artifactId>
            <version>1.1.7</version>
        </dependency>

        <!-- DataFaker is for creating fake data using a provider -->
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
            <version>2.4.4</version>
        </dependency>

        <!-- Lombok is for code generation -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.40</version>
            <scope>provided</scope>
        </dependency>

        <!-- Additional tools to use with Jakarta Faces -->
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>15.0.7</version>
            <classifier>jakarta</classifier>
        </dependency>
        <dependency>
            <groupId>org.webjars.npm</groupId>
            <artifactId>primeflex</artifactId>
            <version>4.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.omnifaces</groupId>
            <artifactId>omnifaces</artifactId>
            <version>4.6.5</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
            <artifactId>owasp-java-html-sanitizer</artifactId>
            <version>20240325.1</version>
        </dependency>

        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
            </plugin>

            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>5.1.4.Final</version>
                <configuration>
                    <feature-packs>
                        <feature-pack>
                            <location>wildfly@maven(org.jboss.universe:community-universe)#37.0.1.Final</location>
                        </feature-pack>
                    </feature-packs>
                    <!-- deploys the app on root web context -->
                    <name>ROOT.war</name>
                    <!-- Enable debugging -->
                    <!-- https://www.jetbrains.com/help/idea/attaching-to-local-process.html#attach-to-local -->
                    <!-- To attach a debugger to the running server from IntelliJ IDEA
                        1. From the main menu, choose `Run | Attach to Process`
                        2. IntelliJ IDEA will show the list of running local processes.
                            Select the process with the `jboss-module.jar (8787)` name to attach to.
                    -->
                    <debug>true</debug>
                    <debugPort>8787</debugPort>
                    <debugSuspend>false</debugSuspend>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>